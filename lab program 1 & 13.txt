class Base:
    def __init__(self):
        self.a = 10
        self._b = 20
        
    def display(self):
         print(" the values are :")
         print(f"a={self.a} b={self._b}")

class Derived(Base):                                   # Creating a derived
    def __init__(self):         
        Base.__init__(self)                        # Calling constructor of Base class
        self.d = 30
        
    def display(self):
        Base.display(self)
        print(f"d={self.d}")

    def __add__(self, ob):
        return self.a + ob.a+self.d + ob.d
        #return self.a + ob.a+self.d + ob.d+self.b + ob.b


obj2 = Derived()
obj3 = Derived()


obj2.display()
obj3.display()

print("\n Sum of two objects :",obj2 + obj3)


4.


import pandas as pd
cars_data=pd.read_csv("Toyota.csv")

cars_data.head()
cars2 =cars_data.copy()
cars3 =cars_data.copy()

cars2 = cars_data.drop(['Doors','Weight'],axis='columns')
cars2.shape

cars2.isna().sum()

missing = cars2[cars2.isnull().any(axis=1)]
missing


cars2.describe()

cars2['Age'].mean()


cars2['Age'].fillna(cars2['Age'].mean(), inplace = True)
#cars2['KM'].fillna(cars2['KM'].median(), inplace = True)
#cars2['HP'].fillna(cars2['HP'].mean(), inplace = True)
cars2.isna().sum()

cars2['FuelType'].value_counts()

cars2['FuelType'].value_counts().index[0]
cars2['FuelType'].fillna(cars2['FuelType'].value_counts().index[0], inplace = True)


cars2['MetColor'].mode()

cars2['MetColor'].fillna(cars2['MetColor'].mode()[0], inplace = True)

cars2.isna().sum()

print(cars_data.shape)
print(cars_data.index)
cars_data.ndim



5.

import numpy as np
arr1 = np.array([[1, 2, 3], [4, 5, 6]])
arr2 = np.array([[7, 8, 9], [10, 11, 12]])
print("concatenating two arrays \n",np.concatenate([arr1, arr2], axis=1))     #columnwise concatenation
print("vertical stacking  \n",np.vstack((arr1, arr2)))                      #Stack arrays in sequence vertically (row wise).
print("horizontal stacking \n",np.hstack((arr1,arr2)))


arr = np.array([1, 2, 3, 4, 5, 4, 4])
x = np.where(arr == 4)
print(x)

arr = np.array([6, 7, 8, 9])
x = np.searchsorted(arr, 5)
print(x)

arr = np.array([1, 3, 5, 7])
x = np.searchsorted(arr, [2, 4, 6])
print(x)


a = np.array([[1,4],[3,1]])
print("sorted array : ",np.sort(a))                # sort along the last axis
print("\n sorted flattened array:", np.sort(a, axis=0))    # sort the flattened array

x = np.array([3, 1, 2])

print("\n indices that would sort an array",np.argsort(x))

print("\n sorting complex number :" ,np.sort_complex([5, 3, 6, 2, 1]))



import numpy as np

x = np.arange(9.0)
print(np.split(x, 3))                # with no of partitions N, 
print(np.split(x, [3, 5, 6, 10]))   # with indices

#the array will be divided into N equal arrays along axis. If such a split is not possible, an error is raised.

x = np.arange(9)
np.array_split(x, 4)               

#Split an array into multiple sub-arrays of equal or near-equal size. Does not raise an exception if an
equal division cannot be made.

a = np.array([[1, 3, 5, 7, 9, 11],
              [2, 4, 6, 8, 10, 12]])
  
# horizontal splitting
print("Splitting along horizontal axis into 2 parts:\n", np.hsplit(a, 2))
  
# vertical splitting
print("\nSplitting along vertical axis into 2 parts:\n", np.vsplit(a, 2))



6.


x1 = [1,2,3,4,5]
y1 = [2,5,2,6,8]
x2 = [1,2,3,4,5]
y2 = [4,5,8,9,10]
plt.xlabel("X Axis",fontsize=12,fontstyle='italic')
plt.ylabel("Y Axis",fontsize=12)
plt.title("Line Plot",fontsize=15,fontname='Courier')
plt.scatter(x1,y1,color="red",label="First Graph")   ### line plot
plt.scatter(x2,y2,color="blue",s=150,marker="*",label="Second Graph")   ### line plot
plt.plot(x2,y2,color="blue")
plt.legend(loc=2)
#plt.axis('off')
plt.show()

import numpy as np
sample = np.random.randint(10,100,30)
plt.hist(sample,rwidth=0.7)
plt.show()

x1 = [1,2,3,4,5]
y1 = [2,5,2,6,8]
x2 = [1,2,3,4,5]
y2 = [4,5,8,9,10]
plt.xlabel("X Axis",fontsize=12,fontstyle='italic')
plt.ylabel("Y Axis",fontsize=12)
plt.title("Line Plot",fontsize=15,fontname='DejaVu Sans')
plt.plot(x1,y1,color="red",label="First Graph")   ### line plot
plt.plot(x2,y2,color="blue",label="Second Graph")   ### line plot
plt.legend(loc=2)
plt.grid()
#plt.axis('off')



#### Bar Plot 
#x = [1,2,3,4,5]
x = ['A',"B","C","D","E"]
y = [20,50,20,60,80]
plt.xlabel("X Axis",fontsize=12)
plt.ylabel("Y Axis",fontsize=12)
plt.title("Bar Plot",fontsize=15)
plt.bar(x,y,color="red",width=0.5)   ### bar plot
plt.show()

### Pie Chart
plt.figure(figsize=(7,7))
slices = [10,20,50,30,34]
act = ["A","B","C","D","E"]
cols = ["red","blue","green","pink","yellow"]
plt.pie(slices,labels=act,colors=cols,
        autopct="%1.2f%%",explode=(0,0.2,0,0.1,0))
plt.show()


